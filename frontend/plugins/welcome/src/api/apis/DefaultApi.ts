/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersMealplan,
    ControllersMealplanFromJSON,
    ControllersMealplanToJSON,
    EntFood,
    EntFoodFromJSON,
    EntFoodToJSON,
    EntMeal,
    EntMealFromJSON,
    EntMealToJSON,
    EntMealplan,
    EntMealplanFromJSON,
    EntMealplanToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateFoodRequest {
    food: EntFood;
}

export interface CreateMealRequest {
    meal: EntMeal;
}

export interface CreateMealplanRequest {
    mealplan: ControllersMealplan;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteFoodRequest {
    id: number;
}

export interface DeleteMealRequest {
    id: number;
}

export interface DeleteMealplanRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetFoodRequest {
    id: number;
}

export interface GetMealRequest {
    id: number;
}

export interface GetMealplanRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListFoodRequest {
    limit?: number;
    offset?: number;
}

export interface ListMealRequest {
    limit?: number;
    offset?: number;
}

export interface ListMealplanRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateFoodRequest {
    id: number;
    food: EntFood;
}

export interface UpdateMealRequest {
    id: number;
    meal: EntMeal;
}

export interface UpdateMealplanRequest {
    id: number;
    mealplan: EntMealplan;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create food
     * Create food
     */
    async createFoodRaw(requestParameters: CreateFoodRequest): Promise<runtime.ApiResponse<EntFood>> {
        if (requestParameters.food === null || requestParameters.food === undefined) {
            throw new runtime.RequiredError('food','Required parameter requestParameters.food was null or undefined when calling createFood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFoodToJSON(requestParameters.food),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodFromJSON(jsonValue));
    }

    /**
     * Create food
     * Create food
     */
    async createFood(requestParameters: CreateFoodRequest): Promise<EntFood> {
        const response = await this.createFoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create meal
     * Create meal
     */
    async createMealRaw(requestParameters: CreateMealRequest): Promise<runtime.ApiResponse<EntMeal>> {
        if (requestParameters.meal === null || requestParameters.meal === undefined) {
            throw new runtime.RequiredError('meal','Required parameter requestParameters.meal was null or undefined when calling createMeal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/meals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMealToJSON(requestParameters.meal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealFromJSON(jsonValue));
    }

    /**
     * Create meal
     * Create meal
     */
    async createMeal(requestParameters: CreateMealRequest): Promise<EntMeal> {
        const response = await this.createMealRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create mealplan
     * Create mealplan
     */
    async createMealplanRaw(requestParameters: CreateMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.mealplan === null || requestParameters.mealplan === undefined) {
            throw new runtime.RequiredError('mealplan','Required parameter requestParameters.mealplan was null or undefined when calling createMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mealplans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMealplanToJSON(requestParameters.mealplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * Create mealplan
     * Create mealplan
     */
    async createMealplan(requestParameters: CreateMealplanRequest): Promise<EntMealplan> {
        const response = await this.createMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get food by ID
     * Delete a food entity by ID
     */
    async deleteFoodRaw(requestParameters: DeleteFoodRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get food by ID
     * Delete a food entity by ID
     */
    async deleteFood(requestParameters: DeleteFoodRequest): Promise<object> {
        const response = await this.deleteFoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * get meal by ID
     * Delete a meal entity by ID
     */
    async deleteMealRaw(requestParameters: DeleteMealRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMeal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get meal by ID
     * Delete a meal entity by ID
     */
    async deleteMeal(requestParameters: DeleteMealRequest): Promise<object> {
        const response = await this.deleteMealRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mealplan by ID
     * Delete a mealplan entity by ID
     */
    async deleteMealplanRaw(requestParameters: DeleteMealplanRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get mealplan by ID
     * Delete a mealplan entity by ID
     */
    async deleteMealplan(requestParameters: DeleteMealplanRequest): Promise<object> {
        const response = await this.deleteMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get food by ID
     * Get a food entity by ID
     */
    async getFoodRaw(requestParameters: GetFoodRequest): Promise<runtime.ApiResponse<EntFood>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodFromJSON(jsonValue));
    }

    /**
     * get food by ID
     * Get a food entity by ID
     */
    async getFood(requestParameters: GetFoodRequest): Promise<EntFood> {
        const response = await this.getFoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * get meal by ID
     * Get a meal entity by ID
     */
    async getMealRaw(requestParameters: GetMealRequest): Promise<runtime.ApiResponse<EntMeal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMeal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealFromJSON(jsonValue));
    }

    /**
     * get meal by ID
     * Get a meal entity by ID
     */
    async getMeal(requestParameters: GetMealRequest): Promise<EntMeal> {
        const response = await this.getMealRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mealplan by ID
     * Get a mealplan entity by ID
     */
    async getMealplanRaw(requestParameters: GetMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * get mealplan by ID
     * Get a mealplan entity by ID
     */
    async getMealplan(requestParameters: GetMealplanRequest): Promise<EntMealplan> {
        const response = await this.getMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list food entities
     * List food entities
     */
    async listFoodRaw(requestParameters: ListFoodRequest): Promise<runtime.ApiResponse<Array<EntFood>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFoodFromJSON));
    }

    /**
     * list food entities
     * List food entities
     */
    async listFood(requestParameters: ListFoodRequest): Promise<Array<EntFood>> {
        const response = await this.listFoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * list meal entities
     * List meal entities
     */
    async listMealRaw(requestParameters: ListMealRequest): Promise<runtime.ApiResponse<Array<EntMeal>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMealFromJSON));
    }

    /**
     * list meal entities
     * List meal entities
     */
    async listMeal(requestParameters: ListMealRequest): Promise<Array<EntMeal>> {
        const response = await this.listMealRaw(requestParameters);
        return await response.value();
    }

    /**
     * list mealplan entities
     * List mealplan entities
     */
    async listMealplanRaw(requestParameters: ListMealplanRequest): Promise<runtime.ApiResponse<Array<EntMealplan>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMealplanFromJSON));
    }

    /**
     * list mealplan entities
     * List mealplan entities
     */
    async listMealplan(requestParameters: ListMealplanRequest): Promise<Array<EntMealplan>> {
        const response = await this.listMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update food by ID
     * Update a food entity by ID
     */
    async updateFoodRaw(requestParameters: UpdateFoodRequest): Promise<runtime.ApiResponse<EntFood>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFood.');
        }

        if (requestParameters.food === null || requestParameters.food === undefined) {
            throw new runtime.RequiredError('food','Required parameter requestParameters.food was null or undefined when calling updateFood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFoodToJSON(requestParameters.food),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodFromJSON(jsonValue));
    }

    /**
     * update food by ID
     * Update a food entity by ID
     */
    async updateFood(requestParameters: UpdateFoodRequest): Promise<EntFood> {
        const response = await this.updateFoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * update meal by ID
     * Update a meal entity by ID
     */
    async updateMealRaw(requestParameters: UpdateMealRequest): Promise<runtime.ApiResponse<EntMeal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeal.');
        }

        if (requestParameters.meal === null || requestParameters.meal === undefined) {
            throw new runtime.RequiredError('meal','Required parameter requestParameters.meal was null or undefined when calling updateMeal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMealToJSON(requestParameters.meal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealFromJSON(jsonValue));
    }

    /**
     * update meal by ID
     * Update a meal entity by ID
     */
    async updateMeal(requestParameters: UpdateMealRequest): Promise<EntMeal> {
        const response = await this.updateMealRaw(requestParameters);
        return await response.value();
    }

    /**
     * update mealplan by ID
     * Update a mealplan entity by ID
     */
    async updateMealplanRaw(requestParameters: UpdateMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMealplan.');
        }

        if (requestParameters.mealplan === null || requestParameters.mealplan === undefined) {
            throw new runtime.RequiredError('mealplan','Required parameter requestParameters.mealplan was null or undefined when calling updateMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMealplanToJSON(requestParameters.mealplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * update mealplan by ID
     * Update a mealplan entity by ID
     */
    async updateMealplan(requestParameters: UpdateMealplanRequest): Promise<EntMealplan> {
        const response = await this.updateMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
