basePath: /api/v1
definitions:
  controllers.Mealplan:
    properties:
      date:
        type: string
      food:
        type: integer
      meal:
        type: integer
      owner:
        type: integer
    type: object
  ent.Food:
    properties:
      added:
        description: Added holds the value of the "added" field.
        type: string
      calories:
        description: Calories holds the value of the "calories" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.FoodEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the FoodQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      ing:
        description: Ing holds the value of the "ing" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.FoodEdges:
    properties:
      mealplans:
        description: Mealplans holds the value of the mealplans edge.
        items:
          $ref: '#/definitions/ent.Mealplan'
        type: array
      owner:
        $ref: '#/definitions/ent.User'
        description: Owner holds the value of the owner edge.
        type: object
    type: object
  ent.Meal:
    properties:
      edges:
        $ref: '#/definitions/ent.MealEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MealQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.MealEdges:
    properties:
      mealplans:
        description: Mealplans holds the value of the mealplans edge.
        items:
          $ref: '#/definitions/ent.Mealplan'
        type: array
    type: object
  ent.Mealplan:
    properties:
      date:
        description: Date holds the value of the "date" field.
        type: string
      edges:
        $ref: '#/definitions/ent.MealplanEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MealplanQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.MealplanEdges:
    properties:
      foods:
        $ref: '#/definitions/ent.Food'
        description: Foods holds the value of the foods edge.
        type: object
      meals:
        $ref: '#/definitions/ent.Meal'
        description: Meals holds the value of the meals edge.
        type: object
      owner:
        $ref: '#/definitions/ent.User'
        description: Owner holds the value of the owner edge.
        type: object
    type: object
  ent.User:
    properties:
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      foods:
        description: Foods holds the value of the foods edge.
        items:
          $ref: '#/definitions/ent.Food'
        type: array
      mealplans:
        description: Mealplans holds the value of the mealplans edge.
        items:
          $ref: '#/definitions/ent.Mealplan'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /foodmenus/{id}:
    put:
      consumes:
      - application/json
      description: update meal by ID
      operationId: update-meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      - description: Meal entity
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/ent.Meal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Meal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a meal entity by ID
  /foods:
    get:
      description: list food entities
      operationId: list-food
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Food'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List food entities
    post:
      consumes:
      - application/json
      description: Create food
      operationId: create-food
      parameters:
      - description: Food entity
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/ent.Food'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Food'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create food
  /foods/{id}:
    delete:
      description: get food by ID
      operationId: delete-food
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a food entity by ID
    get:
      description: get food by ID
      operationId: get-food
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Food'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a food entity by ID
    put:
      consumes:
      - application/json
      description: update food by ID
      operationId: update-food
      parameters:
      - description: Food ID
        in: path
        name: id
        required: true
        type: integer
      - description: Food entity
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/ent.Food'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Food'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a food entity by ID
  /mealplans:
    get:
      description: list mealplan entities
      operationId: list-mealplan
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Mealplan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List mealplan entities
    post:
      consumes:
      - application/json
      description: Create mealplan
      operationId: create-mealplan
      parameters:
      - description: Mealplan entity
        in: body
        name: mealplan
        required: true
        schema:
          $ref: '#/definitions/controllers.Mealplan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Mealplan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create mealplan
  /mealplans/{id}:
    delete:
      description: get mealplan by ID
      operationId: delete-mealplan
      parameters:
      - description: Mealplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a mealplan entity by ID
    get:
      description: get mealplan by ID
      operationId: get-mealplan
      parameters:
      - description: Mealplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Mealplan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a mealplan entity by ID
    put:
      consumes:
      - application/json
      description: update mealplan by ID
      operationId: update-mealplan
      parameters:
      - description: Mealplan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mealplan entity
        in: body
        name: mealplan
        required: true
        schema:
          $ref: '#/definitions/ent.Mealplan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Mealplan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a mealplan entity by ID
  /meals:
    get:
      description: list meal entities
      operationId: list-meal
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Meal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List meal entities
    post:
      consumes:
      - application/json
      description: Create meal
      operationId: create-meal
      parameters:
      - description: Meal entity
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/ent.Meal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Meal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create meal
  /meals/{id}:
    delete:
      description: get meal by ID
      operationId: delete-meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a meal entity by ID
    get:
      description: get meal by ID
      operationId: get-meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Meal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a meal entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
