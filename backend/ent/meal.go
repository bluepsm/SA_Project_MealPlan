// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/bluepsm/app/ent/meal"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Meal is the model entity for the Meal schema.
type Meal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MealQuery when eager-loading is set.
	Edges MealEdges `json:"edges"`
}

// MealEdges holds the relations/edges for other nodes in the graph.
type MealEdges struct {
	// Mealplans holds the value of the mealplans edge.
	Mealplans []*Mealplan
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MealplansOrErr returns the Mealplans value or an error if the edge
// was not loaded in eager-loading.
func (e MealEdges) MealplansOrErr() ([]*Mealplan, error) {
	if e.loadedTypes[0] {
		return e.Mealplans, nil
	}
	return nil, &NotLoadedError{edge: "mealplans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meal) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meal fields.
func (m *Meal) assignValues(values ...interface{}) error {
	if m, n := len(values), len(meal.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	return nil
}

// QueryMealplans queries the mealplans edge of the Meal.
func (m *Meal) QueryMealplans() *MealplanQuery {
	return (&MealClient{config: m.config}).QueryMealplans(m)
}

// Update returns a builder for updating this Meal.
// Note that, you need to call Meal.Unwrap() before calling this method, if this Meal
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meal) Update() *MealUpdateOne {
	return (&MealClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Meal) Unwrap() *Meal {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meal is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meal) String() string {
	var builder strings.Builder
	builder.WriteString("Meal(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Meals is a parsable slice of Meal.
type Meals []*Meal

func (m Meals) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
