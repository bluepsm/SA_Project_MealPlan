// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/bluepsm/app/ent/food"
	"github.com/bluepsm/app/ent/meal"
	"github.com/bluepsm/app/ent/mealplan"
	"github.com/bluepsm/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFood     = "Food"
	TypeMeal     = "Meal"
	TypeMealplan = "Mealplan"
	TypeUser     = "User"
)

// FoodMutation represents an operation that mutate the Foods
// nodes in the graph.
type FoodMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	ing              *string
	calories         *int
	addcalories      *int
	added            *string
	clearedFields    map[string]struct{}
	mealplans        map[int]struct{}
	removedmealplans map[int]struct{}
	owner            *int
	clearedowner     bool
	done             bool
	oldValue         func(context.Context) (*Food, error)
}

var _ ent.Mutation = (*FoodMutation)(nil)

// foodOption allows to manage the mutation configuration using functional options.
type foodOption func(*FoodMutation)

// newFoodMutation creates new mutation for $n.Name.
func newFoodMutation(c config, op Op, opts ...foodOption) *FoodMutation {
	m := &FoodMutation{
		config:        c,
		op:            op,
		typ:           TypeFood,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoodID sets the id field of the mutation.
func withFoodID(id int) foodOption {
	return func(m *FoodMutation) {
		var (
			err   error
			once  sync.Once
			value *Food
		)
		m.oldValue = func(ctx context.Context) (*Food, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Food.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFood sets the old Food of the mutation.
func withFood(node *Food) foodOption {
	return func(m *FoodMutation) {
		m.oldValue = func(context.Context) (*Food, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FoodMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *FoodMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *FoodMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Food.
// If the Food object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *FoodMutation) ResetName() {
	m.name = nil
}

// SetIng sets the ing field.
func (m *FoodMutation) SetIng(s string) {
	m.ing = &s
}

// Ing returns the ing value in the mutation.
func (m *FoodMutation) Ing() (r string, exists bool) {
	v := m.ing
	if v == nil {
		return
	}
	return *v, true
}

// OldIng returns the old ing value of the Food.
// If the Food object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodMutation) OldIng(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIng is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIng: %w", err)
	}
	return oldValue.Ing, nil
}

// ResetIng reset all changes of the "ing" field.
func (m *FoodMutation) ResetIng() {
	m.ing = nil
}

// SetCalories sets the calories field.
func (m *FoodMutation) SetCalories(i int) {
	m.calories = &i
	m.addcalories = nil
}

// Calories returns the calories value in the mutation.
func (m *FoodMutation) Calories() (r int, exists bool) {
	v := m.calories
	if v == nil {
		return
	}
	return *v, true
}

// OldCalories returns the old calories value of the Food.
// If the Food object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodMutation) OldCalories(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCalories is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCalories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCalories: %w", err)
	}
	return oldValue.Calories, nil
}

// AddCalories adds i to calories.
func (m *FoodMutation) AddCalories(i int) {
	if m.addcalories != nil {
		*m.addcalories += i
	} else {
		m.addcalories = &i
	}
}

// AddedCalories returns the value that was added to the calories field in this mutation.
func (m *FoodMutation) AddedCalories() (r int, exists bool) {
	v := m.addcalories
	if v == nil {
		return
	}
	return *v, true
}

// ResetCalories reset all changes of the "calories" field.
func (m *FoodMutation) ResetCalories() {
	m.calories = nil
	m.addcalories = nil
}

// SetAdded sets the added field.
func (m *FoodMutation) SetAdded(s string) {
	m.added = &s
}

// Added returns the added value in the mutation.
func (m *FoodMutation) Added() (r string, exists bool) {
	v := m.added
	if v == nil {
		return
	}
	return *v, true
}

// OldAdded returns the old added value of the Food.
// If the Food object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodMutation) OldAdded(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdded is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdded: %w", err)
	}
	return oldValue.Added, nil
}

// ResetAdded reset all changes of the "added" field.
func (m *FoodMutation) ResetAdded() {
	m.added = nil
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (m *FoodMutation) AddMealplanIDs(ids ...int) {
	if m.mealplans == nil {
		m.mealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.mealplans[ids[i]] = struct{}{}
	}
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (m *FoodMutation) RemoveMealplanIDs(ids ...int) {
	if m.removedmealplans == nil {
		m.removedmealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmealplans[ids[i]] = struct{}{}
	}
}

// RemovedMealplans returns the removed ids of mealplans.
func (m *FoodMutation) RemovedMealplansIDs() (ids []int) {
	for id := range m.removedmealplans {
		ids = append(ids, id)
	}
	return
}

// MealplansIDs returns the mealplans ids in the mutation.
func (m *FoodMutation) MealplansIDs() (ids []int) {
	for id := range m.mealplans {
		ids = append(ids, id)
	}
	return
}

// ResetMealplans reset all changes of the "mealplans" edge.
func (m *FoodMutation) ResetMealplans() {
	m.mealplans = nil
	m.removedmealplans = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *FoodMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *FoodMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *FoodMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *FoodMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *FoodMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *FoodMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Op returns the operation name.
func (m *FoodMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Food).
func (m *FoodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FoodMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, food.FieldName)
	}
	if m.ing != nil {
		fields = append(fields, food.FieldIng)
	}
	if m.calories != nil {
		fields = append(fields, food.FieldCalories)
	}
	if m.added != nil {
		fields = append(fields, food.FieldAdded)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FoodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case food.FieldName:
		return m.Name()
	case food.FieldIng:
		return m.Ing()
	case food.FieldCalories:
		return m.Calories()
	case food.FieldAdded:
		return m.Added()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FoodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case food.FieldName:
		return m.OldName(ctx)
	case food.FieldIng:
		return m.OldIng(ctx)
	case food.FieldCalories:
		return m.OldCalories(ctx)
	case food.FieldAdded:
		return m.OldAdded(ctx)
	}
	return nil, fmt.Errorf("unknown Food field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FoodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case food.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case food.FieldIng:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIng(v)
		return nil
	case food.FieldCalories:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCalories(v)
		return nil
	case food.FieldAdded:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdded(v)
		return nil
	}
	return fmt.Errorf("unknown Food field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FoodMutation) AddedFields() []string {
	var fields []string
	if m.addcalories != nil {
		fields = append(fields, food.FieldCalories)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FoodMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case food.FieldCalories:
		return m.AddedCalories()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FoodMutation) AddField(name string, value ent.Value) error {
	switch name {
	case food.FieldCalories:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCalories(v)
		return nil
	}
	return fmt.Errorf("unknown Food numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FoodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FoodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Food nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FoodMutation) ResetField(name string) error {
	switch name {
	case food.FieldName:
		m.ResetName()
		return nil
	case food.FieldIng:
		m.ResetIng()
		return nil
	case food.FieldCalories:
		m.ResetCalories()
		return nil
	case food.FieldAdded:
		m.ResetAdded()
		return nil
	}
	return fmt.Errorf("unknown Food field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FoodMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mealplans != nil {
		edges = append(edges, food.EdgeMealplans)
	}
	if m.owner != nil {
		edges = append(edges, food.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FoodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case food.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.mealplans))
		for id := range m.mealplans {
			ids = append(ids, id)
		}
		return ids
	case food.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FoodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmealplans != nil {
		edges = append(edges, food.EdgeMealplans)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FoodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case food.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.removedmealplans))
		for id := range m.removedmealplans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FoodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, food.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FoodMutation) EdgeCleared(name string) bool {
	switch name {
	case food.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FoodMutation) ClearEdge(name string) error {
	switch name {
	case food.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Food unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FoodMutation) ResetEdge(name string) error {
	switch name {
	case food.EdgeMealplans:
		m.ResetMealplans()
		return nil
	case food.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Food edge %s", name)
}

// MealMutation represents an operation that mutate the Meals
// nodes in the graph.
type MealMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	mealplans        map[int]struct{}
	removedmealplans map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Meal, error)
}

var _ ent.Mutation = (*MealMutation)(nil)

// mealOption allows to manage the mutation configuration using functional options.
type mealOption func(*MealMutation)

// newMealMutation creates new mutation for $n.Name.
func newMealMutation(c config, op Op, opts ...mealOption) *MealMutation {
	m := &MealMutation{
		config:        c,
		op:            op,
		typ:           TypeMeal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMealID sets the id field of the mutation.
func withMealID(id int) mealOption {
	return func(m *MealMutation) {
		var (
			err   error
			once  sync.Once
			value *Meal
		)
		m.oldValue = func(ctx context.Context) (*Meal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeal sets the old Meal of the mutation.
func withMeal(node *Meal) mealOption {
	return func(m *MealMutation) {
		m.oldValue = func(context.Context) (*Meal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MealMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MealMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MealMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *MealMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MealMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Meal.
// If the Meal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MealMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MealMutation) ResetName() {
	m.name = nil
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (m *MealMutation) AddMealplanIDs(ids ...int) {
	if m.mealplans == nil {
		m.mealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.mealplans[ids[i]] = struct{}{}
	}
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (m *MealMutation) RemoveMealplanIDs(ids ...int) {
	if m.removedmealplans == nil {
		m.removedmealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmealplans[ids[i]] = struct{}{}
	}
}

// RemovedMealplans returns the removed ids of mealplans.
func (m *MealMutation) RemovedMealplansIDs() (ids []int) {
	for id := range m.removedmealplans {
		ids = append(ids, id)
	}
	return
}

// MealplansIDs returns the mealplans ids in the mutation.
func (m *MealMutation) MealplansIDs() (ids []int) {
	for id := range m.mealplans {
		ids = append(ids, id)
	}
	return
}

// ResetMealplans reset all changes of the "mealplans" edge.
func (m *MealMutation) ResetMealplans() {
	m.mealplans = nil
	m.removedmealplans = nil
}

// Op returns the operation name.
func (m *MealMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Meal).
func (m *MealMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MealMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, meal.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MealMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meal.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MealMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meal.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Meal field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meal.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Meal field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MealMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MealMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Meal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MealMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MealMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MealMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Meal nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MealMutation) ResetField(name string) error {
	switch name {
	case meal.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Meal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MealMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mealplans != nil {
		edges = append(edges, meal.EdgeMealplans)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MealMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meal.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.mealplans))
		for id := range m.mealplans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MealMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmealplans != nil {
		edges = append(edges, meal.EdgeMealplans)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MealMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case meal.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.removedmealplans))
		for id := range m.removedmealplans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MealMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MealMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MealMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Meal unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MealMutation) ResetEdge(name string) error {
	switch name {
	case meal.EdgeMealplans:
		m.ResetMealplans()
		return nil
	}
	return fmt.Errorf("unknown Meal edge %s", name)
}

// MealplanMutation represents an operation that mutate the Mealplans
// nodes in the graph.
type MealplanMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	foods         *int
	clearedfoods  bool
	meals         *int
	clearedmeals  bool
	done          bool
	oldValue      func(context.Context) (*Mealplan, error)
}

var _ ent.Mutation = (*MealplanMutation)(nil)

// mealplanOption allows to manage the mutation configuration using functional options.
type mealplanOption func(*MealplanMutation)

// newMealplanMutation creates new mutation for $n.Name.
func newMealplanMutation(c config, op Op, opts ...mealplanOption) *MealplanMutation {
	m := &MealplanMutation{
		config:        c,
		op:            op,
		typ:           TypeMealplan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMealplanID sets the id field of the mutation.
func withMealplanID(id int) mealplanOption {
	return func(m *MealplanMutation) {
		var (
			err   error
			once  sync.Once
			value *Mealplan
		)
		m.oldValue = func(ctx context.Context) (*Mealplan, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mealplan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMealplan sets the old Mealplan of the mutation.
func withMealplan(node *Mealplan) mealplanOption {
	return func(m *MealplanMutation) {
		m.oldValue = func(context.Context) (*Mealplan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MealplanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MealplanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MealplanMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the date field.
func (m *MealplanMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the date value in the mutation.
func (m *MealplanMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old date value of the Mealplan.
// If the Mealplan object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MealplanMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate reset all changes of the "date" field.
func (m *MealplanMutation) ResetDate() {
	m.date = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *MealplanMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *MealplanMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *MealplanMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *MealplanMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MealplanMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *MealplanMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetFoodsID sets the foods edge to Food by id.
func (m *MealplanMutation) SetFoodsID(id int) {
	m.foods = &id
}

// ClearFoods clears the foods edge to Food.
func (m *MealplanMutation) ClearFoods() {
	m.clearedfoods = true
}

// FoodsCleared returns if the edge foods was cleared.
func (m *MealplanMutation) FoodsCleared() bool {
	return m.clearedfoods
}

// FoodsID returns the foods id in the mutation.
func (m *MealplanMutation) FoodsID() (id int, exists bool) {
	if m.foods != nil {
		return *m.foods, true
	}
	return
}

// FoodsIDs returns the foods ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FoodsID instead. It exists only for internal usage by the builders.
func (m *MealplanMutation) FoodsIDs() (ids []int) {
	if id := m.foods; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFoods reset all changes of the "foods" edge.
func (m *MealplanMutation) ResetFoods() {
	m.foods = nil
	m.clearedfoods = false
}

// SetMealsID sets the meals edge to Meal by id.
func (m *MealplanMutation) SetMealsID(id int) {
	m.meals = &id
}

// ClearMeals clears the meals edge to Meal.
func (m *MealplanMutation) ClearMeals() {
	m.clearedmeals = true
}

// MealsCleared returns if the edge meals was cleared.
func (m *MealplanMutation) MealsCleared() bool {
	return m.clearedmeals
}

// MealsID returns the meals id in the mutation.
func (m *MealplanMutation) MealsID() (id int, exists bool) {
	if m.meals != nil {
		return *m.meals, true
	}
	return
}

// MealsIDs returns the meals ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MealsID instead. It exists only for internal usage by the builders.
func (m *MealplanMutation) MealsIDs() (ids []int) {
	if id := m.meals; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMeals reset all changes of the "meals" edge.
func (m *MealplanMutation) ResetMeals() {
	m.meals = nil
	m.clearedmeals = false
}

// Op returns the operation name.
func (m *MealplanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Mealplan).
func (m *MealplanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MealplanMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.date != nil {
		fields = append(fields, mealplan.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MealplanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mealplan.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MealplanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mealplan.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Mealplan field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealplanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mealplan.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Mealplan field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MealplanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MealplanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealplanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Mealplan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MealplanMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MealplanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MealplanMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mealplan nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MealplanMutation) ResetField(name string) error {
	switch name {
	case mealplan.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Mealplan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MealplanMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, mealplan.EdgeOwner)
	}
	if m.foods != nil {
		edges = append(edges, mealplan.EdgeFoods)
	}
	if m.meals != nil {
		edges = append(edges, mealplan.EdgeMeals)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MealplanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mealplan.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case mealplan.EdgeFoods:
		if id := m.foods; id != nil {
			return []ent.Value{*id}
		}
	case mealplan.EdgeMeals:
		if id := m.meals; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MealplanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MealplanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MealplanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, mealplan.EdgeOwner)
	}
	if m.clearedfoods {
		edges = append(edges, mealplan.EdgeFoods)
	}
	if m.clearedmeals {
		edges = append(edges, mealplan.EdgeMeals)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MealplanMutation) EdgeCleared(name string) bool {
	switch name {
	case mealplan.EdgeOwner:
		return m.clearedowner
	case mealplan.EdgeFoods:
		return m.clearedfoods
	case mealplan.EdgeMeals:
		return m.clearedmeals
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MealplanMutation) ClearEdge(name string) error {
	switch name {
	case mealplan.EdgeOwner:
		m.ClearOwner()
		return nil
	case mealplan.EdgeFoods:
		m.ClearFoods()
		return nil
	case mealplan.EdgeMeals:
		m.ClearMeals()
		return nil
	}
	return fmt.Errorf("unknown Mealplan unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MealplanMutation) ResetEdge(name string) error {
	switch name {
	case mealplan.EdgeOwner:
		m.ResetOwner()
		return nil
	case mealplan.EdgeFoods:
		m.ResetFoods()
		return nil
	case mealplan.EdgeMeals:
		m.ResetMeals()
		return nil
	}
	return fmt.Errorf("unknown Mealplan edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	email            *string
	clearedFields    map[string]struct{}
	mealplans        map[int]struct{}
	removedmealplans map[int]struct{}
	foods            map[int]struct{}
	removedfoods     map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (m *UserMutation) AddMealplanIDs(ids ...int) {
	if m.mealplans == nil {
		m.mealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.mealplans[ids[i]] = struct{}{}
	}
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (m *UserMutation) RemoveMealplanIDs(ids ...int) {
	if m.removedmealplans == nil {
		m.removedmealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmealplans[ids[i]] = struct{}{}
	}
}

// RemovedMealplans returns the removed ids of mealplans.
func (m *UserMutation) RemovedMealplansIDs() (ids []int) {
	for id := range m.removedmealplans {
		ids = append(ids, id)
	}
	return
}

// MealplansIDs returns the mealplans ids in the mutation.
func (m *UserMutation) MealplansIDs() (ids []int) {
	for id := range m.mealplans {
		ids = append(ids, id)
	}
	return
}

// ResetMealplans reset all changes of the "mealplans" edge.
func (m *UserMutation) ResetMealplans() {
	m.mealplans = nil
	m.removedmealplans = nil
}

// AddFoodIDs adds the foods edge to Food by ids.
func (m *UserMutation) AddFoodIDs(ids ...int) {
	if m.foods == nil {
		m.foods = make(map[int]struct{})
	}
	for i := range ids {
		m.foods[ids[i]] = struct{}{}
	}
}

// RemoveFoodIDs removes the foods edge to Food by ids.
func (m *UserMutation) RemoveFoodIDs(ids ...int) {
	if m.removedfoods == nil {
		m.removedfoods = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfoods[ids[i]] = struct{}{}
	}
}

// RemovedFoods returns the removed ids of foods.
func (m *UserMutation) RemovedFoodsIDs() (ids []int) {
	for id := range m.removedfoods {
		ids = append(ids, id)
	}
	return
}

// FoodsIDs returns the foods ids in the mutation.
func (m *UserMutation) FoodsIDs() (ids []int) {
	for id := range m.foods {
		ids = append(ids, id)
	}
	return
}

// ResetFoods reset all changes of the "foods" edge.
func (m *UserMutation) ResetFoods() {
	m.foods = nil
	m.removedfoods = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mealplans != nil {
		edges = append(edges, user.EdgeMealplans)
	}
	if m.foods != nil {
		edges = append(edges, user.EdgeFoods)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.mealplans))
		for id := range m.mealplans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFoods:
		ids := make([]ent.Value, 0, len(m.foods))
		for id := range m.foods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmealplans != nil {
		edges = append(edges, user.EdgeMealplans)
	}
	if m.removedfoods != nil {
		edges = append(edges, user.EdgeFoods)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.removedmealplans))
		for id := range m.removedmealplans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFoods:
		ids := make([]ent.Value, 0, len(m.removedfoods))
		for id := range m.removedfoods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMealplans:
		m.ResetMealplans()
		return nil
	case user.EdgeFoods:
		m.ResetFoods()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
