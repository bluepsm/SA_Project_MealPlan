// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/bluepsm/app/ent/migrate"

	"github.com/bluepsm/app/ent/food"
	"github.com/bluepsm/app/ent/meal"
	"github.com/bluepsm/app/ent/mealplan"
	"github.com/bluepsm/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Food is the client for interacting with the Food builders.
	Food *FoodClient
	// Meal is the client for interacting with the Meal builders.
	Meal *MealClient
	// Mealplan is the client for interacting with the Mealplan builders.
	Mealplan *MealplanClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Food = NewFoodClient(c.config)
	c.Meal = NewMealClient(c.config)
	c.Mealplan = NewMealplanClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Food:     NewFoodClient(cfg),
		Meal:     NewMealClient(cfg),
		Mealplan: NewMealplanClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:   cfg,
		Food:     NewFoodClient(cfg),
		Meal:     NewMealClient(cfg),
		Mealplan: NewMealplanClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Food.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Food.Use(hooks...)
	c.Meal.Use(hooks...)
	c.Mealplan.Use(hooks...)
	c.User.Use(hooks...)
}

// FoodClient is a client for the Food schema.
type FoodClient struct {
	config
}

// NewFoodClient returns a client for the Food from the given config.
func NewFoodClient(c config) *FoodClient {
	return &FoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `food.Hooks(f(g(h())))`.
func (c *FoodClient) Use(hooks ...Hook) {
	c.hooks.Food = append(c.hooks.Food, hooks...)
}

// Create returns a create builder for Food.
func (c *FoodClient) Create() *FoodCreate {
	mutation := newFoodMutation(c.config, OpCreate)
	return &FoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Food.
func (c *FoodClient) Update() *FoodUpdate {
	mutation := newFoodMutation(c.config, OpUpdate)
	return &FoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FoodClient) UpdateOne(f *Food) *FoodUpdateOne {
	mutation := newFoodMutation(c.config, OpUpdateOne, withFood(f))
	return &FoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FoodClient) UpdateOneID(id int) *FoodUpdateOne {
	mutation := newFoodMutation(c.config, OpUpdateOne, withFoodID(id))
	return &FoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Food.
func (c *FoodClient) Delete() *FoodDelete {
	mutation := newFoodMutation(c.config, OpDelete)
	return &FoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FoodClient) DeleteOne(f *Food) *FoodDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FoodClient) DeleteOneID(id int) *FoodDeleteOne {
	builder := c.Delete().Where(food.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FoodDeleteOne{builder}
}

// Create returns a query builder for Food.
func (c *FoodClient) Query() *FoodQuery {
	return &FoodQuery{config: c.config}
}

// Get returns a Food entity by its id.
func (c *FoodClient) Get(ctx context.Context, id int) (*Food, error) {
	return c.Query().Where(food.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FoodClient) GetX(ctx context.Context, id int) *Food {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryMealplans queries the mealplans edge of a Food.
func (c *FoodClient) QueryMealplans(f *Food) *MealplanQuery {
	query := &MealplanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(food.Table, food.FieldID, id),
			sqlgraph.To(mealplan.Table, mealplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, food.MealplansTable, food.MealplansColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Food.
func (c *FoodClient) QueryOwner(f *Food) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(food.Table, food.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, food.OwnerTable, food.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FoodClient) Hooks() []Hook {
	return c.hooks.Food
}

// MealClient is a client for the Meal schema.
type MealClient struct {
	config
}

// NewMealClient returns a client for the Meal from the given config.
func NewMealClient(c config) *MealClient {
	return &MealClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meal.Hooks(f(g(h())))`.
func (c *MealClient) Use(hooks ...Hook) {
	c.hooks.Meal = append(c.hooks.Meal, hooks...)
}

// Create returns a create builder for Meal.
func (c *MealClient) Create() *MealCreate {
	mutation := newMealMutation(c.config, OpCreate)
	return &MealCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Meal.
func (c *MealClient) Update() *MealUpdate {
	mutation := newMealMutation(c.config, OpUpdate)
	return &MealUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MealClient) UpdateOne(m *Meal) *MealUpdateOne {
	mutation := newMealMutation(c.config, OpUpdateOne, withMeal(m))
	return &MealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MealClient) UpdateOneID(id int) *MealUpdateOne {
	mutation := newMealMutation(c.config, OpUpdateOne, withMealID(id))
	return &MealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meal.
func (c *MealClient) Delete() *MealDelete {
	mutation := newMealMutation(c.config, OpDelete)
	return &MealDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MealClient) DeleteOne(m *Meal) *MealDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MealClient) DeleteOneID(id int) *MealDeleteOne {
	builder := c.Delete().Where(meal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MealDeleteOne{builder}
}

// Create returns a query builder for Meal.
func (c *MealClient) Query() *MealQuery {
	return &MealQuery{config: c.config}
}

// Get returns a Meal entity by its id.
func (c *MealClient) Get(ctx context.Context, id int) (*Meal, error) {
	return c.Query().Where(meal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MealClient) GetX(ctx context.Context, id int) *Meal {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMealplans queries the mealplans edge of a Meal.
func (c *MealClient) QueryMealplans(m *Meal) *MealplanQuery {
	query := &MealplanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meal.Table, meal.FieldID, id),
			sqlgraph.To(mealplan.Table, mealplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, meal.MealplansTable, meal.MealplansColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MealClient) Hooks() []Hook {
	return c.hooks.Meal
}

// MealplanClient is a client for the Mealplan schema.
type MealplanClient struct {
	config
}

// NewMealplanClient returns a client for the Mealplan from the given config.
func NewMealplanClient(c config) *MealplanClient {
	return &MealplanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mealplan.Hooks(f(g(h())))`.
func (c *MealplanClient) Use(hooks ...Hook) {
	c.hooks.Mealplan = append(c.hooks.Mealplan, hooks...)
}

// Create returns a create builder for Mealplan.
func (c *MealplanClient) Create() *MealplanCreate {
	mutation := newMealplanMutation(c.config, OpCreate)
	return &MealplanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Mealplan.
func (c *MealplanClient) Update() *MealplanUpdate {
	mutation := newMealplanMutation(c.config, OpUpdate)
	return &MealplanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MealplanClient) UpdateOne(m *Mealplan) *MealplanUpdateOne {
	mutation := newMealplanMutation(c.config, OpUpdateOne, withMealplan(m))
	return &MealplanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MealplanClient) UpdateOneID(id int) *MealplanUpdateOne {
	mutation := newMealplanMutation(c.config, OpUpdateOne, withMealplanID(id))
	return &MealplanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mealplan.
func (c *MealplanClient) Delete() *MealplanDelete {
	mutation := newMealplanMutation(c.config, OpDelete)
	return &MealplanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MealplanClient) DeleteOne(m *Mealplan) *MealplanDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MealplanClient) DeleteOneID(id int) *MealplanDeleteOne {
	builder := c.Delete().Where(mealplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MealplanDeleteOne{builder}
}

// Create returns a query builder for Mealplan.
func (c *MealplanClient) Query() *MealplanQuery {
	return &MealplanQuery{config: c.config}
}

// Get returns a Mealplan entity by its id.
func (c *MealplanClient) Get(ctx context.Context, id int) (*Mealplan, error) {
	return c.Query().Where(mealplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MealplanClient) GetX(ctx context.Context, id int) *Mealplan {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryOwner queries the owner edge of a Mealplan.
func (c *MealplanClient) QueryOwner(m *Mealplan) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mealplan.Table, mealplan.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mealplan.OwnerTable, mealplan.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFoods queries the foods edge of a Mealplan.
func (c *MealplanClient) QueryFoods(m *Mealplan) *FoodQuery {
	query := &FoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mealplan.Table, mealplan.FieldID, id),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mealplan.FoodsTable, mealplan.FoodsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeals queries the meals edge of a Mealplan.
func (c *MealplanClient) QueryMeals(m *Mealplan) *MealQuery {
	query := &MealQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mealplan.Table, mealplan.FieldID, id),
			sqlgraph.To(meal.Table, meal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mealplan.MealsTable, mealplan.MealsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MealplanClient) Hooks() []Hook {
	return c.hooks.Mealplan
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryMealplans queries the mealplans edge of a User.
func (c *UserClient) QueryMealplans(u *User) *MealplanQuery {
	query := &MealplanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mealplan.Table, mealplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MealplansTable, user.MealplansColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFoods queries the foods edge of a User.
func (c *UserClient) QueryFoods(u *User) *FoodQuery {
	query := &FoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FoodsTable, user.FoodsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
