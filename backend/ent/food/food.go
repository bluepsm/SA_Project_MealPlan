// Code generated by entc, DO NOT EDIT.

package food

const (
	// Label holds the string label denoting the food type in the database.
	Label = "food"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIng holds the string denoting the ing field in the database.
	FieldIng = "ing"
	// FieldCalories holds the string denoting the calories field in the database.
	FieldCalories = "calories"
	// FieldAdded holds the string denoting the added field in the database.
	FieldAdded = "added"

	// EdgeMealplans holds the string denoting the mealplans edge name in mutations.
	EdgeMealplans = "mealplans"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"

	// Table holds the table name of the food in the database.
	Table = "foods"
	// MealplansTable is the table the holds the mealplans relation/edge.
	MealplansTable = "mealplans"
	// MealplansInverseTable is the table name for the Mealplan entity.
	// It exists in this package in order to avoid circular dependency with the "mealplan" package.
	MealplansInverseTable = "mealplans"
	// MealplansColumn is the table column denoting the mealplans relation/edge.
	MealplansColumn = "menu_id"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "foods"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
)

// Columns holds all SQL columns for food fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIng,
	FieldCalories,
	FieldAdded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Food type.
var ForeignKeys = []string{
	"user_id",
}
