// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/bluepsm/app/ent/food"
	"github.com/bluepsm/app/ent/mealplan"
	"github.com/bluepsm/app/ent/predicate"
	"github.com/bluepsm/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// FoodUpdate is the builder for updating Food entities.
type FoodUpdate struct {
	config
	hooks      []Hook
	mutation   *FoodMutation
	predicates []predicate.Food
}

// Where adds a new predicate for the builder.
func (fu *FoodUpdate) Where(ps ...predicate.Food) *FoodUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetName sets the name field.
func (fu *FoodUpdate) SetName(s string) *FoodUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetIng sets the ing field.
func (fu *FoodUpdate) SetIng(s string) *FoodUpdate {
	fu.mutation.SetIng(s)
	return fu
}

// SetCalories sets the calories field.
func (fu *FoodUpdate) SetCalories(i int) *FoodUpdate {
	fu.mutation.ResetCalories()
	fu.mutation.SetCalories(i)
	return fu
}

// AddCalories adds i to calories.
func (fu *FoodUpdate) AddCalories(i int) *FoodUpdate {
	fu.mutation.AddCalories(i)
	return fu
}

// SetAdded sets the added field.
func (fu *FoodUpdate) SetAdded(s string) *FoodUpdate {
	fu.mutation.SetAdded(s)
	return fu
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (fu *FoodUpdate) AddMealplanIDs(ids ...int) *FoodUpdate {
	fu.mutation.AddMealplanIDs(ids...)
	return fu
}

// AddMealplans adds the mealplans edges to Mealplan.
func (fu *FoodUpdate) AddMealplans(m ...*Mealplan) *FoodUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fu.AddMealplanIDs(ids...)
}

// SetOwnerID sets the owner edge to User by id.
func (fu *FoodUpdate) SetOwnerID(id int) *FoodUpdate {
	fu.mutation.SetOwnerID(id)
	return fu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (fu *FoodUpdate) SetNillableOwnerID(id *int) *FoodUpdate {
	if id != nil {
		fu = fu.SetOwnerID(*id)
	}
	return fu
}

// SetOwner sets the owner edge to User.
func (fu *FoodUpdate) SetOwner(u *User) *FoodUpdate {
	return fu.SetOwnerID(u.ID)
}

// Mutation returns the FoodMutation object of the builder.
func (fu *FoodUpdate) Mutation() *FoodMutation {
	return fu.mutation
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (fu *FoodUpdate) RemoveMealplanIDs(ids ...int) *FoodUpdate {
	fu.mutation.RemoveMealplanIDs(ids...)
	return fu
}

// RemoveMealplans removes mealplans edges to Mealplan.
func (fu *FoodUpdate) RemoveMealplans(m ...*Mealplan) *FoodUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fu.RemoveMealplanIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (fu *FoodUpdate) ClearOwner() *FoodUpdate {
	fu.mutation.ClearOwner()
	return fu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FoodUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FoodUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FoodUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FoodUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   food.Table,
			Columns: food.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: food.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldName,
		})
	}
	if value, ok := fu.mutation.Ing(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldIng,
		})
	}
	if value, ok := fu.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: food.FieldCalories,
		})
	}
	if value, ok := fu.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: food.FieldCalories,
		})
	}
	if value, ok := fu.mutation.Added(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldAdded,
		})
	}
	if nodes := fu.mutation.RemovedMealplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.MealplansTable,
			Columns: []string{food.MealplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.MealplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.MealplansTable,
			Columns: []string{food.MealplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   food.OwnerTable,
			Columns: []string{food.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   food.OwnerTable,
			Columns: []string{food.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FoodUpdateOne is the builder for updating a single Food entity.
type FoodUpdateOne struct {
	config
	hooks    []Hook
	mutation *FoodMutation
}

// SetName sets the name field.
func (fuo *FoodUpdateOne) SetName(s string) *FoodUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetIng sets the ing field.
func (fuo *FoodUpdateOne) SetIng(s string) *FoodUpdateOne {
	fuo.mutation.SetIng(s)
	return fuo
}

// SetCalories sets the calories field.
func (fuo *FoodUpdateOne) SetCalories(i int) *FoodUpdateOne {
	fuo.mutation.ResetCalories()
	fuo.mutation.SetCalories(i)
	return fuo
}

// AddCalories adds i to calories.
func (fuo *FoodUpdateOne) AddCalories(i int) *FoodUpdateOne {
	fuo.mutation.AddCalories(i)
	return fuo
}

// SetAdded sets the added field.
func (fuo *FoodUpdateOne) SetAdded(s string) *FoodUpdateOne {
	fuo.mutation.SetAdded(s)
	return fuo
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (fuo *FoodUpdateOne) AddMealplanIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.AddMealplanIDs(ids...)
	return fuo
}

// AddMealplans adds the mealplans edges to Mealplan.
func (fuo *FoodUpdateOne) AddMealplans(m ...*Mealplan) *FoodUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fuo.AddMealplanIDs(ids...)
}

// SetOwnerID sets the owner edge to User by id.
func (fuo *FoodUpdateOne) SetOwnerID(id int) *FoodUpdateOne {
	fuo.mutation.SetOwnerID(id)
	return fuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (fuo *FoodUpdateOne) SetNillableOwnerID(id *int) *FoodUpdateOne {
	if id != nil {
		fuo = fuo.SetOwnerID(*id)
	}
	return fuo
}

// SetOwner sets the owner edge to User.
func (fuo *FoodUpdateOne) SetOwner(u *User) *FoodUpdateOne {
	return fuo.SetOwnerID(u.ID)
}

// Mutation returns the FoodMutation object of the builder.
func (fuo *FoodUpdateOne) Mutation() *FoodMutation {
	return fuo.mutation
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (fuo *FoodUpdateOne) RemoveMealplanIDs(ids ...int) *FoodUpdateOne {
	fuo.mutation.RemoveMealplanIDs(ids...)
	return fuo
}

// RemoveMealplans removes mealplans edges to Mealplan.
func (fuo *FoodUpdateOne) RemoveMealplans(m ...*Mealplan) *FoodUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fuo.RemoveMealplanIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (fuo *FoodUpdateOne) ClearOwner() *FoodUpdateOne {
	fuo.mutation.ClearOwner()
	return fuo
}

// Save executes the query and returns the updated entity.
func (fuo *FoodUpdateOne) Save(ctx context.Context) (*Food, error) {

	var (
		err  error
		node *Food
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FoodUpdateOne) SaveX(ctx context.Context) *Food {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FoodUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FoodUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FoodUpdateOne) sqlSave(ctx context.Context) (f *Food, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   food.Table,
			Columns: food.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: food.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Food.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldName,
		})
	}
	if value, ok := fuo.mutation.Ing(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldIng,
		})
	}
	if value, ok := fuo.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: food.FieldCalories,
		})
	}
	if value, ok := fuo.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: food.FieldCalories,
		})
	}
	if value, ok := fuo.mutation.Added(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: food.FieldAdded,
		})
	}
	if nodes := fuo.mutation.RemovedMealplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.MealplansTable,
			Columns: []string{food.MealplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.MealplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.MealplansTable,
			Columns: []string{food.MealplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   food.OwnerTable,
			Columns: []string{food.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   food.OwnerTable,
			Columns: []string{food.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Food{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{food.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
